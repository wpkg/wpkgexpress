<?xml version="1.0" encoding="UTF-8"?>
<xsd:schema	elementFormDefault="qualified" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
    <xsd:annotation>
    	<xsd:documentation>XML Schema Definition for WPKG packages. The root element (packages) contains all packages. There might be multiple XML files of this type put to the packages sub-directory where WPKG is installed.</xsd:documentation></xsd:annotation>
    <xsd:element name="packages" type="packages">
		<xsd:annotation>
			<xsd:documentation>Contains a number of package definitions.</xsd:documentation>
		</xsd:annotation>
	</xsd:element>
	<xsd:complexType name="packages">
		<xsd:annotation>
			<xsd:documentation>
				Specifies how the packages element is built up (list of
				package elements).
			</xsd:documentation>
		</xsd:annotation>
		<xsd:sequence minOccurs="0" maxOccurs="unbounded">
			<xsd:element name="package" type="package"></xsd:element>
		</xsd:sequence>
	</xsd:complexType>
	<xsd:complexType name="package">
		<xsd:annotation>
			<xsd:documentation>Specifies how the package element is build up (list of
checks, commands and downloads).
			</xsd:documentation>
		</xsd:annotation>
		<xsd:choice maxOccurs="unbounded" minOccurs="0">
			<xsd:element ref="check">
				<xsd:annotation>
					<xsd:documentation>Specify checks to check install status of this package.
					</xsd:documentation>
				</xsd:annotation>
			</xsd:element>
			<xsd:element ref="install">
				<xsd:annotation>
					<xsd:documentation>Specify installation command.</xsd:documentation>
				</xsd:annotation>
			</xsd:element>
			<xsd:element ref="upgrade">
				<xsd:annotation>
					<xsd:documentation>Specify upgrade command.</xsd:documentation>
				</xsd:annotation>
			</xsd:element>
			<xsd:element ref="downgrade">
				<xsd:annotation>
					<xsd:documentation>Specify downgrade command.</xsd:documentation>
				</xsd:annotation>
			</xsd:element>
			<xsd:element ref="remove">
				<xsd:annotation>
					<xsd:documentation>Specify remove command.</xsd:documentation>
				</xsd:annotation>
			</xsd:element>
			<xsd:element ref="download">
				<xsd:annotation>
					<xsd:documentation>Specifies a global download (downloaded
regardless of the command to be executed). NOTE:
The download is even executed if your command is
not using it. For example if the remove command
is executed usually you don't need to download
the full installer. Therefore it is recommended
to add such downloads as a sub-node of the
respective command.</xsd:documentation>
				</xsd:annotation>
			</xsd:element>
			<xsd:element ref="depends">
				<xsd:annotation>
					<xsd:documentation>Specify packages the current package depends on (pre-requirements).</xsd:documentation>
				</xsd:annotation>
			</xsd:element>
			<xsd:element ref="variable">
				<xsd:annotation>
					<xsd:documentation>Variable definition - variables defined here can be used within package commands.</xsd:documentation>
				</xsd:annotation></xsd:element>
		</xsd:choice>
		<xsd:attribute name="id" type="xsd:string" use="required">
			<xsd:annotation>
				<xsd:documentation>Package identification. Needs to be a unique ID
among all the packages. The package ID is
case-sensitive unless the /ignoreCase switch is
passed to wpkg.js.
Example: "pidgin"
				</xsd:documentation>
			</xsd:annotation>
		</xsd:attribute>
		<xsd:attribute name="name" type="xsd:string" use="required">
			<xsd:annotation>
				<xsd:documentation>Descriptive name of the package. e.g. "Pidgin
multi-protocol instant messenger"
				</xsd:documentation>
			</xsd:annotation>
		</xsd:attribute>
		<xsd:attribute name="revision" use="optional">
			<xsd:annotation>
				<xsd:documentation>Revision of the package. in the format of
"\d+(\.\d+)*" which means actually integer digits
separated by periods (x.y.z) with any number of
integer values. A pure integer value is valid too.
Optional. Defaults to 0.
				</xsd:documentation>
			</xsd:annotation>
			<xsd:simpleType>
				<xsd:restriction base="xsd:string">
					<xsd:pattern value="\d+(\.\d+)*"></xsd:pattern>
				</xsd:restriction>
			</xsd:simpleType>
		</xsd:attribute>
		<xsd:attribute name="priority" type="xsd:int" use="optional">
			<xsd:annotation>
				<xsd:documentation>Package priority. Packages with higher priorities
are installed first. Optional. Defaults to 0.
				</xsd:documentation>
			</xsd:annotation>
		</xsd:attribute>
		<xsd:attribute name="reboot" use="optional">
			<xsd:annotation>
				<xsd:documentation>Specify if a reboot should be initiated after
package installation. Valid values: true: reboot
immediately after package actions have been executed
false: do not reboot after executing commands
postponed: reboot after all packages have been
installed (not after this one but schedule reboot to
WPKG termination)
				</xsd:documentation>
			</xsd:annotation>
			<xsd:simpleType>
				<xsd:restriction base="xsd:string">
					<xsd:enumeration value="true"></xsd:enumeration>
					<xsd:enumeration value="false"></xsd:enumeration>
					<xsd:enumeration value="postponed"></xsd:enumeration>
				</xsd:restriction>
			</xsd:simpleType>
		</xsd:attribute>
		<xsd:attribute name="execute" use="optional">
			<xsd:annotation>
				<xsd:documentation>Specify how the package should be executed:

always: Execute on each synchronization - regardless of the
current install state or the result of any defined
checks.

once: Execute only once. No checks will be
executed on following synchronization requests
unless the package version on the server side is
changed.

default (or empty/non-existing): default, execute defined checks
at each synchronization to
verify install state. NOTE: If no checks are
defined, then the install state will always return
"false" which means the package is re-installed
(similar effect as specifying execute=always).</xsd:documentation>
			</xsd:annotation>
			<xsd:simpleType>
				<xsd:restriction base="xsd:string">
					<xsd:enumeration value="default"></xsd:enumeration>
					<xsd:enumeration value="once"></xsd:enumeration>
					<xsd:enumeration value="always"></xsd:enumeration>
				</xsd:restriction>
			</xsd:simpleType>
		</xsd:attribute>
		<xsd:attribute name="notify" type="xsd:boolean" use="optional">
			<xsd:annotation>
				<xsd:documentation>Specify if the user should be notified about the installation of packages due to this package.</xsd:documentation>
			</xsd:annotation>
		</xsd:attribute>
	</xsd:complexType>
	<xsd:element name="package" type="package">
		<xsd:annotation>
			<xsd:documentation>Specifies a package element including all values required for WPKG to install/upgrade/downgrade/uninstall, checks and downloads.</xsd:documentation>
		</xsd:annotation>
	</xsd:element>
	<xsd:element name="check" type="check">
		<xsd:annotation>
			<xsd:documentation>Defines a check to determine if the package is installed on the system or not.</xsd:documentation>
		</xsd:annotation>
	</xsd:element>
	<xsd:complexType name="check">
		<xsd:annotation>
			<xsd:documentation>Generic check definition - used for compatibility. Does
not verify correct combination of attributes for all
kind of checks. If you would like to verify the
attributes in more detail please specify the
xsi:type="checkFile" attribute where "checkFile" can be
replaced with any more-specific check type of check*.
Valid types include
- checkFile
- checkRegistry
- checkExecute
- checkUninstall
- checkLogical
			</xsd:documentation>
		</xsd:annotation>
		<xsd:sequence minOccurs="0" maxOccurs="unbounded">
			<xsd:element ref="check" minOccurs="0" maxOccurs="unbounded">
				<xsd:annotation>
					<xsd:documentation>For logical checks sub-checks are allowed/required.</xsd:documentation>
				</xsd:annotation>
			</xsd:element>
		</xsd:sequence>
		<xsd:attribute name="type" type="xsd:string" use="required">
			<xsd:annotation>
				<xsd:documentation>Type of check, valid values are:
- file
- registry
- uninstall
- execute
- logical
				</xsd:documentation>
			</xsd:annotation>
		</xsd:attribute>
		<xsd:attribute name="condition" type="xsd:string" use="required">
			<xsd:annotation>
				<xsd:documentation>Check condition. Valid values are:
- equals
- exists
- sizeequals
- versionsmallerthan
- versionlessorequal
- versionequalto
- versiongreaterorequal
- versiongreaterthan
- exitcodesmallerthan
- exitcodelessorequal
- exitcodeequalto
- exitcodegreaterorequal
- exitcodegreaterthan
- not
- and
- or
- atleast
- atmost</xsd:documentation>
			</xsd:annotation>
		</xsd:attribute>
		<xsd:attribute name="path" type="xsd:string" use="optional"
			default="%SystemRoot%\explorer.exe">
			<xsd:annotation>
				<xsd:documentation>Path to be used for checks (registry path, file path).
				</xsd:documentation>
			</xsd:annotation>
		</xsd:attribute>
		<xsd:attribute name="value" type="xsd:string" use="optional"
			default="1.0">
			<xsd:annotation>
				<xsd:documentation>A value is required for some check conditions like VERSION, SIZE or EQUALS checks.

Note for registry equals checks: The value should contain a string representing the data
within the registry value. In case the value is a DWORD just enter a numeric string.
The values will be compared in their string representation (DWORD converted to String).
In case you compare to a REG_MULTI_SZ value all data fields will be concatnated to a single
string separated by newline characters. Example:
REG_MULTI_SZ = a
                               b
                               c
value = "a
b
c"
will match.
REG_BINARY values will be converted to multiline string as well. Each octett of the binary value
is converted to its decimal representation.
REG_BINARY = "11 22 33 44"
value = "17
34
51
68"
will match.</xsd:documentation>
			</xsd:annotation>
		</xsd:attribute>
	</xsd:complexType>
	<xsd:complexType name="checkFile">
		<xsd:annotation>
			<xsd:documentation>Check type for file specific tests.</xsd:documentation>
		</xsd:annotation>
		<xsd:complexContent>
			<xsd:restriction base="check">
				<xsd:attribute name="type" use="required" fixed="file">
					<xsd:annotation>
						<xsd:documentation>File checks need to specify 'file' as the type of check.
						</xsd:documentation>
					</xsd:annotation>
					<xsd:simpleType>
						<xsd:restriction base="xsd:string">
							<xsd:enumeration value="file"></xsd:enumeration>
						</xsd:restriction>
					</xsd:simpleType>
				</xsd:attribute>
				<xsd:attribute name="condition" use="required">
					<xsd:annotation>
						<xsd:documentation>Specify what should be tested on the file
specified within the 'path' property.
- exists: Check for file existence
- sizeequals: Check for file size (exact size in Bytes specified within the 'value' attribute)
- version*: Compare file version to version specified within the 'value' attribute.
                    	</xsd:documentation>
					</xsd:annotation>
					<xsd:simpleType>
						<xsd:restriction base="xsd:string">
							<xsd:enumeration value="exists"></xsd:enumeration>
							<xsd:enumeration value="equals"></xsd:enumeration>
							<xsd:enumeration value="versionsmallerthan">
							</xsd:enumeration>
							<xsd:enumeration value="versionlessorequal">
							</xsd:enumeration>
							<xsd:enumeration value="versionequalto"></xsd:enumeration>
							<xsd:enumeration value="versiongreaterorequal">
							</xsd:enumeration>
							<xsd:enumeration value="versiongreaterthan">
							</xsd:enumeration>
						</xsd:restriction>
					</xsd:simpleType>
				</xsd:attribute>
				<xsd:attribute name="path" type="xsd:string" use="required">
					<xsd:annotation>
						<xsd:documentation>Path to the file to be checked. You might
use environment variables as well:
"C:\Windows\explorer.exe"
"%TEMP%\somefile.txt"</xsd:documentation>
					</xsd:annotation>
				</xsd:attribute>
				<xsd:attribute name="value" type="xsd:string" use="optional">
					<xsd:annotation>
						<xsd:documentation>This value is optional only for existence check. For all other checks it it is required.
						</xsd:documentation>
					</xsd:annotation></xsd:attribute>
			</xsd:restriction>
		</xsd:complexContent>
	</xsd:complexType>

	<xsd:complexType name="checkRegistry">
        <xsd:annotation>
        	<xsd:documentation>Use this type to specify a check for registry values.
        	</xsd:documentation>
        </xsd:annotation>
        <xsd:complexContent>
			<xsd:restriction base="check">

				<xsd:attribute name="type" use="required"
					fixed="registry">
					<xsd:annotation>
						<xsd:documentation>
							Registry checks need to specify 'registry'
							as the the type of check.
						</xsd:documentation>
					</xsd:annotation>
					<xsd:simpleType>
						<xsd:restriction base="xsd:string">
							<xsd:enumeration value="registry"></xsd:enumeration>
						</xsd:restriction>
					</xsd:simpleType>
				</xsd:attribute>
				<xsd:attribute name="condition" use="required">
					<xsd:annotation>
						<xsd:documentation>- exist: Check for existence of the key/value supplied within the 'path' attribute.
- equals: Check if the specified value contains the data entered within the 'value' attribute.</xsd:documentation>
					</xsd:annotation>
					<xsd:simpleType>
						<xsd:restriction base="xsd:string">
							<xsd:enumeration value="exists"></xsd:enumeration>
							<xsd:enumeration value="equals"></xsd:enumeration>
						</xsd:restriction>
					</xsd:simpleType>
				</xsd:attribute>
				<xsd:attribute name="path" type="xsd:string"
					use="required">
					<xsd:annotation>
						<xsd:documentation>Enter registry path to a key which you like to check. Valid examples:
"HKLM\Software"
(NOTE: Only existence checks are avalid on registry KEYS.)
"HKLM\Software\WPKG\running"</xsd:documentation>
					</xsd:annotation>
				</xsd:attribute>
				<xsd:attribute name="value" type="xsd:string" use="optional">
					<xsd:annotation>
						<xsd:documentation>Data to check te specified registry value against.
NOTE: This attribute is optional only for registry existence checks.
It is REQUIRED if you use equal checks.</xsd:documentation>
					</xsd:annotation></xsd:attribute>
			</xsd:restriction>
		</xsd:complexContent>
	</xsd:complexType>




	<xsd:complexType name="checkUninstall">
		<xsd:annotation>
			<xsd:documentation>Use this type to specify a check for uninstall entries (Control Panel => Add/Remove programs).
			</xsd:documentation>
		</xsd:annotation>
		<xsd:complexContent>
			<xsd:restriction base="check">
				<xsd:attribute name="type" fixed="uninstall"
					use="required">
					<xsd:annotation>
						<xsd:documentation>
							Uninstall checks need to specify 'uninstall'
							as the the type of check.
						</xsd:documentation>
					</xsd:annotation>
					<xsd:simpleType>
						<xsd:restriction base="xsd:string">
							<xsd:enumeration value="uninstall"></xsd:enumeration>
						</xsd:restriction>
					</xsd:simpleType>
				</xsd:attribute>
				<xsd:attribute name="condition" use="required">
					<xsd:annotation>
						<xsd:documentation>- exist: Check if an uninstall entry equal to the value within the 'value' attribute exists (see Control Panel => Add/Remove software)
- version*: Compares the uninstall entry version to the value within the 'value' attribute. NOTE: This only works if the application specifies a "DisplayVersion" value within the Windows registry. Valid values:
- versionsmallerthan
- versionlessorequal
- versionequalto
- versiongreaterorequal
- versiongreaterthan
						</xsd:documentation>
					</xsd:annotation>
					<xsd:simpleType>
						<xsd:restriction base="xsd:string">
							<xsd:enumeration value="exists"></xsd:enumeration>
							<xsd:enumeration
								value="versionsmallerthan">
							</xsd:enumeration>
							<xsd:enumeration
								value="versionlessorequal">
							</xsd:enumeration>
							<xsd:enumeration value="versionequalto"></xsd:enumeration>
							<xsd:enumeration
								value="versiongreaterorequal">
							</xsd:enumeration>
							<xsd:enumeration
								value="versiongreaterthan">
							</xsd:enumeration>
						</xsd:restriction>
					</xsd:simpleType>
				</xsd:attribute>
				<xsd:attribute name="path" type="xsd:string"
					use="required">
					<xsd:annotation>
						<xsd:documentation>Name of the uninstall entry as it appears within Control Panel => Add/Remove software.
						</xsd:documentation>
					</xsd:annotation>
				</xsd:attribute>
				<xsd:attribute name="value" type="xsd:string" use="optional">
					<xsd:annotation>
						<xsd:documentation>Specifies a version if any of the version* checks are used</xsd:documentation>
					</xsd:annotation></xsd:attribute>
			</xsd:restriction>
		</xsd:complexContent>
	</xsd:complexType>

	<xsd:complexType name="checkExecute">
		<xsd:annotation>
			<xsd:documentation>Use this type of check to execute a script. Its exit code can be evaluated by rules then.
			</xsd:documentation>
		</xsd:annotation>
		<xsd:complexContent>
			<xsd:restriction base="check">
				<xsd:attribute name="type" use="required"
					fixed="execute">
					<xsd:annotation>
						<xsd:documentation>
							Execute checks need to specify 'execute'
							here.
						</xsd:documentation>
					</xsd:annotation>
					<xsd:simpleType>
						<xsd:restriction base="xsd:string">
							<xsd:enumeration value="execute"></xsd:enumeration>
						</xsd:restriction>
					</xsd:simpleType>
				</xsd:attribute>
				<xsd:attribute name="condition" use="required">
					<xsd:annotation>
						<xsd:documentation>Verify the exit code of the script executed. Please specify the exit code to compare to within the 'value' attribute. Valid values:
- exitcodesmallerthan: true in case the script exit code is numerically less than the value specified
- exitcodelessorequal: true in case the script exit code is numerically less or equal than the value specified
- exitcodeequalto: true in case the script exit code is numerically equal to the value specified
- exitcodegreaterorequal: true in case the script exit code is numerically greater or equal to the value specified
- exitcodegreaterthan: true in case the script exit code is numerically larger than the value specified
						</xsd:documentation>
					</xsd:annotation>
					<xsd:simpleType>
						<xsd:restriction base="xsd:string">
							<xsd:enumeration
								value="exitcodesmallerthan">
							</xsd:enumeration>
							<xsd:enumeration
								value="exitcodelessorequal">
							</xsd:enumeration>
							<xsd:enumeration value="exitcodeequalto"></xsd:enumeration>
							<xsd:enumeration
								value="exitcodegreaterorequal">
							</xsd:enumeration>
							<xsd:enumeration
								value="exitcodegreaterthan">
							</xsd:enumeration>
						</xsd:restriction>
					</xsd:simpleType>
				</xsd:attribute>
				<xsd:attribute name="path" type="xsd:string" use="required">
					<xsd:annotation>
						<xsd:documentation>Path to the script to be executed. The
						</xsd:documentation>
					</xsd:annotation>
				</xsd:attribute>
				<xsd:attribute name="value" type="xsd:string" use="required">
					<xsd:annotation>
						<xsd:documentation>Value used in exit code comparison.</xsd:documentation>
					</xsd:annotation></xsd:attribute>
			</xsd:restriction>
		</xsd:complexContent>
	</xsd:complexType>

	<xsd:complexType name="checkLogical">
		<xsd:annotation>
			<xsd:documentation>Use this check for logical chaining of other checks.
			</xsd:documentation>
		</xsd:annotation>
		<xsd:complexContent>
            <xsd:restriction base="check">
				<xsd:sequence minOccurs="1" maxOccurs="unbounded">
					<xsd:element ref="check">
						<xsd:annotation>
							<xsd:documentation>Insert any sub-check here. Note: The logical "not" check requires to specify 1 (exactly one) sub-check while others like the "atleast" check makes no sense with less checks than specified for the corresponding value.</xsd:documentation>
						</xsd:annotation></xsd:element>
				</xsd:sequence>
				<xsd:attribute name="type" use="required"
					fixed="logical">
					<xsd:annotation>
						<xsd:documentation>
							Type of check has to be set to 'logical' for
							logical checks.
						</xsd:documentation>
					</xsd:annotation>
					<xsd:simpleType>
						<xsd:restriction base="xsd:string">
							<xsd:enumeration value="logical"></xsd:enumeration>
						</xsd:restriction>
					</xsd:simpleType>
				</xsd:attribute>
				<xsd:attribute name="condition" use="required">
                    <xsd:annotation>
                    	<xsd:documentation>Check condition:
- not: Requires exactly one single sub-element of type "check" whose exit code boolean value is inverted.
- and: Returns "false" immediately if one of the contained checks returns false. Only evaluates true in case ALL checks contained evaluate true.
- or: Returns true immediately as soon as one of the checks return true. Only evaluates false if ALL checks contained evaluate false.
- atleast: Returns true only if at least the specified amount of checks contained return true. For example if you specify 5 checks and the value for 'atleast' is set to 3 then it returns true as soon as 3 checks out of 5 evaluated true.
- atmost: Returns true if maximum the specified amount of checks return true. For example if you specify 5 checks and the value for 'atmost' is set to 3 it will return true only if no more than 3 checks evaluate true.</xsd:documentation>
                    </xsd:annotation>
                    <xsd:simpleType>
						<xsd:restriction base="xsd:string">
							<xsd:enumeration value="not"></xsd:enumeration>
							<xsd:enumeration value="and"></xsd:enumeration>
							<xsd:enumeration value="or"></xsd:enumeration>
							<xsd:enumeration value="atleast"></xsd:enumeration>
							<xsd:enumeration value="atmost"></xsd:enumeration>
						</xsd:restriction>
					</xsd:simpleType>
				</xsd:attribute>
				<xsd:attribute name="value" type="xsd:string" use="optional">
                    <xsd:annotation>
                    	<xsd:documentation>Number of checks required for 'atleast' and 'atmost' checks. Unused for all other conditions.</xsd:documentation>
                    </xsd:annotation>
				</xsd:attribute>
			</xsd:restriction>
		</xsd:complexContent>
	</xsd:complexType>

    <xsd:element name="download" type="download">
    	<xsd:annotation>
    		<xsd:documentation>Defines a file to be downloaded in order to install the package.</xsd:documentation>
    	</xsd:annotation></xsd:element>

    <xsd:complexType name="download">
        <xsd:annotation>
        	<xsd:documentation>Specifies how a download node looks like including all attributes.</xsd:documentation>
        </xsd:annotation>
        <xsd:attribute name="url" type="xsd:string" use="required">
        	<xsd:annotation>
        		<xsd:documentation>URL where the file is downloaded: http://server.example.org/path/to/file.exe</xsd:documentation>
        	</xsd:annotation></xsd:attribute>
    	<xsd:attribute name="target" type="xsd:string" use="required">
    		<xsd:annotation>
    			<xsd:documentation>Target path to store the file to. The path has to be specified relative to the downloadDir property within config.xml. By default relative to %TEMP%. For example specify "pidgin\pidgin.exe" to download the file at the specified URL to "%TEMP%\pidgin\pigin.exe". The file is removed after the commands are executed.</xsd:documentation>
    		</xsd:annotation></xsd:attribute>
    	<xsd:attribute name="timeout" type="xsd:string" use="optional">
    		<xsd:annotation>
    			<xsd:documentation>Optional download timeout (specified in seconds).</xsd:documentation>
    		</xsd:annotation></xsd:attribute>
    </xsd:complexType>

    <xsd:element name="install" type="command">
    	<xsd:annotation>
    		<xsd:documentation>Install command definition.</xsd:documentation>
    	</xsd:annotation></xsd:element>

    <xsd:complexType name="command">
    	<xsd:annotation>
    		<xsd:documentation>Type definition used for all commands (install, upgrade, downgrade, remove)
    		</xsd:documentation>
    	</xsd:annotation>
    	<xsd:choice minOccurs="0" maxOccurs="unbounded">
    		<xsd:element ref="exit">
    			<xsd:annotation>
    				<xsd:documentation>Specify any number of exit codes to handle unusual (mostly non-zero) exit codes of the commands.</xsd:documentation>
    			</xsd:annotation>
    		</xsd:element>
    		<xsd:element ref="download">
    			<xsd:annotation>
    				<xsd:documentation>Specifis a downloaad which is downloaded only if the surrounding command definition is executed (local download). Compare also to the "global download" specified on the package node.</xsd:documentation>
    			</xsd:annotation>
    		</xsd:element>
    	</xsd:choice>
        <xsd:attribute name="cmd" type="xsd:string" use="required">
        	<xsd:annotation>
        		<xsd:documentation>Specify the command to be executed in order to
install the application in silent mode. Example:
&quot;%SOFTWARE%\pidgin\pidgin.exe /L=1033 /DS=1 /NOUI&quot;.</xsd:documentation></xsd:annotation></xsd:attribute>
        <xsd:attribute name="timeout" type="xsd:int" use="optional">
    		<xsd:annotation>
    			<xsd:documentation>Specify timeout for command (in seconds).</xsd:documentation>
    		</xsd:annotation>
        </xsd:attribute>
    	<xsd:attribute name="workdir" type="xsd:string"
    		use="optional">
    		<xsd:annotation>
    			<xsd:documentation>Specify working directory in which the command is executed.</xsd:documentation>
    		</xsd:annotation>
    	</xsd:attribute>     </xsd:complexType>


    <xsd:element name="exit" type="exit">
    	<xsd:annotation>
    		<xsd:documentation>Exit code specification for command nodes.</xsd:documentation>
    	</xsd:annotation></xsd:element>

    <xsd:complexType name="exit">
    	<xsd:annotation>
    		<xsd:documentation>Definition for exit code specification.
    		</xsd:documentation>
    	</xsd:annotation>
    	<xsd:attribute name="code" type="xsd:string" use="required">
    		<xsd:annotation>
    			<xsd:documentation>Specify integer value which matches the exit code of
the installer. Or specify the string "any" to match
any exit code.
    			</xsd:documentation>
    		</xsd:annotation>
    	</xsd:attribute>
    	<xsd:attribute name="reboot" use="optional">
    		<xsd:annotation>
    			<xsd:documentation>Specify this attribute if the exit code should
initiate/shedule any type of reboot. Valid values: -
true: Reuire immediate reboot after this command. -
delayed: Schedule reboot after execution of all
commands has been finished (after-package reboot) -
postponed: Schedule reboot after execution of all
packages (after-wpkg reboot)
    			</xsd:documentation>
    		</xsd:annotation>
    		<xsd:simpleType>
    			<xsd:restriction base="xsd:string">
    				<xsd:enumeration value="true"></xsd:enumeration>
    				<xsd:enumeration value="false"></xsd:enumeration>
    				<xsd:enumeration value="delayed"></xsd:enumeration>
    				<xsd:enumeration value="postponed"></xsd:enumeration>
    			</xsd:restriction>
    		</xsd:simpleType>
    	</xsd:attribute>
    </xsd:complexType>

    <xsd:element name="remove" type="command">
    	<xsd:annotation>
    		<xsd:documentation>Remove command definition.</xsd:documentation>
    	</xsd:annotation></xsd:element>

    <xsd:element name="upgrade" type="command">
    	<xsd:annotation>
    		<xsd:documentation>Upgrade command definition.</xsd:documentation>
    	</xsd:annotation></xsd:element>

    <xsd:element name="downgrade" type="command">
    	<xsd:annotation>
    		<xsd:documentation>Downgrade command definition.</xsd:documentation>
    	</xsd:annotation></xsd:element>

    <xsd:element name="depends" type="depends">
    	<xsd:annotation>
    		<xsd:documentation>Specify package dependencies.</xsd:documentation>
    	</xsd:annotation></xsd:element>

    <xsd:complexType name="depends">
    	<xsd:attribute name="package-id" type="xsd:string" use="required">
    		<xsd:annotation>
    			<xsd:documentation>Equal to the ID attribute of any existing package. Specifies the package which the package depends on.</xsd:documentation>
    		</xsd:annotation></xsd:attribute>
    </xsd:complexType>

    <xsd:element name="variable" type="variable">
    	<xsd:annotation>
    		<xsd:documentation>Variable definition.</xsd:documentation>
    	</xsd:annotation></xsd:element>

    <xsd:complexType name="variable">
    	<xsd:attribute name="name" type="xsd:string" use="required">
    		<xsd:annotation>
    			<xsd:documentation>Variable name.</xsd:documentation>
    		</xsd:annotation>
    	</xsd:attribute>
    	<xsd:attribute name="value" type="xsd:string" use="required">
    		<xsd:annotation>
    			<xsd:documentation>Variable value.</xsd:documentation>
    		</xsd:annotation></xsd:attribute>
    </xsd:complexType>
</xsd:schema>